rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents { // {database} clause to indicates that these rules apply to all databases in Firestore

    match /{document=**} {
      allow read: if request.auth != null;
      allow create: if request.auth.token.email_verified == true;
      allow update: if request.auth.token.email_verified == true;
      allow delete: if request.auth.token.email_verified == true;
    }
    
    /** VALIDATION FUNCTIONS **/
    function checkMandatory( prop) {
      return prop != null && prop !="";
    }
    /*
     *  Person
     */

    match /{person}/{document=**}{
      allow create:
          if request.auth.token.email_verified == true
          && request.resource.data.personId != null ? checkMandatory(request.resource.data.personId) : true
          && request.resource.data.personName != null ? checkMandatory(request.resource.data.personName) : true
          && request.resource.data.gender != null ? checkMandatory(request.resource.data.gender) : true
          && request.resource.data.birth != null ? checkMandatory(request.resource.data.birth) : true
          ;
      
      allow update:
          if request.auth.token.email_verified == true
          && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role', 'personName', 'gender', 'birth']))
          && request.resource.data.personName != null ? checkMandatory(request.resource.data.personName) : true
          && request.resource.data.gender != null ? checkMandatory(request.resource.data.gender) : true
          && request.resource.data.birth != null ? checkMandatory(request.resource.data.birth) : true
          ;
          

      allow delete:
          if request.auth.token.email_verified == true;
    }
  }
}
